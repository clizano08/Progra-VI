@model Web.ViewModels.ViewModelLogin

@* Se fuerza que no utilice el layout de la aplicación para que no muestre el menú.*@
@{
    Layout = Layout = "~/Views/Shared/_Login.cshtml"; ;
}

@{
    ViewBag.Title = "Iniciar Sesión";
}

@if (TempData["Message"] != null)
{
    string mensaje = @"<div class='alert alert-danger alert-dismissible' role='alert'><button type='button' class='close' data-dismiss='alert' aria-label='Close'>
<span aria-hidden='true'>&times;</span> </button><strong>"+ TempData["Message"]+"</strong></div>";
@Html.Raw(mensaje);
}

@using (Html.BeginForm("Login", "Login"))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.IdUsuario, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.IdUsuario, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.IdUsuario, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Contrasenna, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*Campo tipo password*@
                @Html.PasswordFor(model => model.Contrasenna, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Contrasenna, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Iniciar Sesión" class="btn btn-danger btn-block" />
            </div>
        </div>
       
    </div>
}



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
